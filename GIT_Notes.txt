Git Intro

Install git via https://git-scm.com/download/win

Install Git GUI App

Create a repository folder for Git

Move to that dir using Git bash console app

$ git init

all the required files and folder will be created but is hidden use "ls -a" to see all including hidden files

once thats done you will see "(master)" tag on your repository folder in the bash console

if "./git" hidden folder is present and "master" is present your setup is okay to proceed.

$ git status // to show the status of the files in the working directory.

$ git add <file_name>  //to add the file to tracked by Git , all changes done so will be sort considered in staging area

(use "git rm --cached <file>..." to unstage)

$ git commit -m "Add README.md"   

Make sure the message starts with a Verb like Add Update Delete


$ git log
use the above command to see the log history of commits 

if everything is clean log "git status" should show all is "clean" message


Add multiple files of the same type

$ git add *.html  //to add any html files

Add all files in the directlory including hidden files

$ git add -A

Remove a file from staging area

$ git reset HEAD file.txt 

// sometimes when you have already add the subfolder-file or a subfolder to the staging area but later want git to ignore it before commit
// we can add the same folder or file to the top level .gitignore file but for any files in the subfolder we may need to remove it from the staging area
// or else "git status" will still show the subfolder or subfolder/file  and will be committed.
// for top level files thats not a problem unless we want to place .gitignore file in each subfolder which is not a idle solution.


Ignore folder and file

$ touch .gitignore //add the files and folder to this file .gitignore  

All folders and files added to this is ignored 

Listing a branch

$ git branch


Adding a new Branch

$ git checkout -b <branch_name>

$ git checkout -b feature1
// this command move the bash into the newly created branch "feature1" , and if we execute "$ git branch" , we should see a "*" to the left of feature1
//  indicating that it is the current branch we are working on


changing between branches 

$ git checkout <branch_name>

// $  git checkout feature1 , to move to the "master" branch

// $  git checkout master   , to move to the "master" branch

Merge between branches 

We can merge a branch into the current branch 

$ git checkout <branch_name_changes_to_be_merged_into_from_a_different_branch>

$ git merge <branch_name_you_want_to_merge_into_the_current_branch>

//
$ git checkout master // if you are not in master branch
$ git merge feature1 // this will merge feature1 branch into the Master branch, note that feature1 will not be aware of the changes in master

Removing a branch 

$ git branch -d <branch_name>


checking out commits

Git allows us to checkout any of the commits from our log. This means we can go back and look at the code from our earlier commits without losing any of our current commits. This is especially useful when you're current codebase is broken, but you have an earlier commit with working code.

The steps are as follows:

1) Make sure you're inside of your project's directory, using the cd command.
2) Once inside of the directory, use git log to view your log history.
3) You can scroll down to earlier commits by hitting enter (return)
4) Once you locate the commit you want to checkout, copy the hash key from the commit.
        - The hash key is the alphanumeric string that comes after the word "commit" (see yellow text in image below


        - The hash from above is the string of characters that begins with 7484e645. You don't have to copy the entire sequence of characters, the first few will do.

5) Exit out of git log by pressing Q
6) Type git checkout 7484e645 (replace the hash with one from your selected commit) and hit enter

7) Now you can look around inside of this commit and copy any code that you need.
   If you'd like to start working from this commit, but don't want to overwrite any of the code from the branch that you're currently on (in this case it's master) then you can type git checkout -b <branch_name> to create a new branch to begin working from.

8) Once you're done working from this commit,
   you can return to the most recent commit on the branch of your choosing by typing git checkout <branch_name>, in this case I typed git checkout master and it returned me to my most recent commit on the master branch.

Note: When you checkout an earlier commit, you are now in a "detached HEAD" state, this means that you are no longer on the commit that is being pointed to by the HEAD. The HEAD, in git, is a pointer to the most recent commit of whichever branch you are currently on.




